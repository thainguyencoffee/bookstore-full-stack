plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id("nu.studer.jooq") version "9.0"

}

group = 'com.bookstore'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.2")
    set('testKeycloakVersion', '3.3.1')
    set('cloudinaryVersion', "1.38.0")
}

dependencies {
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.1000'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation "com.cloudinary:cloudinary-http44:${cloudinaryVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
	
    implementation'org.springframework.boot:spring-boot-starter-jooq'
    implementation'org.postgresql:postgresql'
    jooqGenerator 'org.postgresql:postgresql'
	
}

jooq {
    configurations {
        main {
            generateSchemaSourceOnCompilation = true
            generationTool {
                jdbc {
                    driver = "org.postgresql.Driver"
                    url = System.getenv('SPRING_DATASOURCE_URL') ?: 'jdbc:postgresql://localhost:5432/bookstoredb'
                    user = System.getenv('SPRING_DATASOURCE_USERNAME') ?: 'user'
                    password = System.getenv('SPRING_DATASOURCE_PASSWORD') ?: 'password'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = '.*'
                        excludes = ''
                    }

                    target {
                        packageName = "nu.studer.sample"

                    }
                }
            }
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
tasks.named('generateJooq').configure { allInputsDeclared = true }

bootBuildImage {
    builder = "docker.io/paketobuildpacks/builder-jammy-base"
    imageName = "bookstore/resource-server"
    environment = ["BP_JVM_VERSION": "17.*"]

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}

springBoot {
    buildInfo()
}